{"version":3,"sources":["../../src/rules/checkExamples.js"],"names":["zeroBasedLineIndexAdjust","likelyNestedJSDocIndentSpace","preTagSpaceLength","hasCaptionRegex","escapeStringRegexp","str","replace","countChars","ch","match","RegExp","length","getRegexFromString","regexString","flags","regex","uniqueFlags","Set","join","report","utils","context","options","exampleCodeRegex","rejectExampleCodeRegex","noDefaultExampleRules","eslintrcForExamples","matchingFileName","filename","paddedIndent","baseConfig","configFile","allowInlineConfig","reportUnusedDisableDirectives","captionRequired","rulePaths","rules","undefined","forEachPreferredTag","tag","targetTagName","firstLinePrefixLength","source","description","trim","test","sources","nonJSPrefacingCols","nonJSPrefacingLines","startingIndex","lastStringCount","exampleCode","lastIndex","exec","index","n0","n1","preMatch","slice","preMatchLines","colDelta","lastIndexOf","nonJSPreface","nonJSPrefaceLineCount","idx","indexOf","charsInLastLine","string","push","global","checkRules","cli","CLIEngine","useEslintrc","messages","src","config","getConfigForFile","cliFile","linter","Linter","executeOnText","error","linterRules","getRules","entries","reduce","obj","key","val","defineRules","parser","defineParser","require","verify","results","codeStartLine","line","codeStartCol","forEach","message","column","severity","ruleId","startLine","startCol","iterateAllJsdocs","meta","schema","additionalProperties","properties","default","type","noTrim"],"mappings":"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","sourcesContent":["import {CLIEngine, Linter} from 'eslint';\nimport iterateJsdoc from '../iterateJsdoc';\nimport warnRemovedSettings from '../warnRemovedSettings';\n\nconst zeroBasedLineIndexAdjust = -1;\nconst likelyNestedJSDocIndentSpace = 1;\nconst preTagSpaceLength = 1;\nconst hasCaptionRegex = /^\\s*<caption>(.*?)<\\/caption>/u;\n\nconst escapeStringRegexp = (str) => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n};\nconst countChars = (str, ch) => {\n  return (str.match(new RegExp(escapeStringRegexp(ch), 'gu')) || []).length;\n};\n\nconst getRegexFromString = (regexString) => {\n  const match = regexString.match(/^\\/(.*)\\/([gimyus]*)$/u);\n  let flags = 'u';\n  let regex = regexString;\n  if (match) {\n    [, regex, flags] = match;\n    if (!flags) {\n      flags = 'u';\n    }\n    const uniqueFlags = [...new Set(flags)];\n    flags = uniqueFlags.join('');\n  }\n\n  return new RegExp(regex, flags);\n};\n\nexport default iterateJsdoc(({\n  report,\n  utils,\n  context,\n}) => {\n  warnRemovedSettings(context, 'check-examples');\n  const options = context.options[0] || {};\n  let {\n    exampleCodeRegex = null,\n    rejectExampleCodeRegex = null,\n  } = options;\n  const {\n    noDefaultExampleRules = false,\n    eslintrcForExamples = true,\n    matchingFileName: filename = null,\n    paddedIndent = 0,\n    baseConfig = {},\n    configFile,\n    allowInlineConfig = true,\n    reportUnusedDisableDirectives = true,\n    captionRequired = false,\n  } = options;\n\n  // Make this configurable?\n  const rulePaths = [];\n\n  const rules = noDefaultExampleRules ? undefined : {\n    // \"always\" newline rule at end unlikely in sample code\n    'eol-last': 0,\n\n    // Wouldn't generally expect example paths to resolve relative to JS file\n    'import/no-unresolved': 0,\n\n    // Snippets likely too short to always include import/export info\n    'import/unambiguous': 0,\n\n    // Unlikely to have inadvertent debugging within examples\n    'no-console': 0,\n\n    // Often wish to start `@example` code after newline; also may use\n    //   empty lines for spacing\n    'no-multiple-empty-lines': 0,\n\n    // Many variables in examples will be `undefined`\n    'no-undef': 0,\n\n    // Common to define variables for clarity without always using them\n    'no-unused-vars': 0,\n\n    // See import/no-unresolved\n    'node/no-missing-import': 0,\n    'node/no-missing-require': 0,\n\n    // Can generally look nicer to pad a little even if code imposes more stringency\n    'padded-blocks': 0,\n  };\n\n  if (exampleCodeRegex) {\n    exampleCodeRegex = getRegexFromString(exampleCodeRegex);\n  }\n  if (rejectExampleCodeRegex) {\n    rejectExampleCodeRegex = getRegexFromString(rejectExampleCodeRegex);\n  }\n\n  utils.forEachPreferredTag('example', (tag, targetTagName) => {\n    // If a space is present, we should ignore it\n    const firstLinePrefixLength = preTagSpaceLength;\n\n    let source = tag.description;\n    const match = source.match(hasCaptionRegex);\n\n    if (captionRequired && (!match || !match[1].trim())) {\n      report('Caption is expected for examples.', null, tag);\n    }\n\n    // If we allow newlines in hasCaptionRegex, we should add to line count\n    source = source.replace(hasCaptionRegex, '');\n\n    if (exampleCodeRegex && !exampleCodeRegex.test(source) ||\n      rejectExampleCodeRegex && rejectExampleCodeRegex.test(source)\n    ) {\n      return;\n    }\n\n    const sources = [];\n    if (exampleCodeRegex) {\n      let nonJSPrefacingCols = 0;\n      let nonJSPrefacingLines = 0;\n\n      let startingIndex = 0;\n      let lastStringCount = 0;\n\n      let exampleCode;\n      exampleCodeRegex.lastIndex = 0;\n      while ((exampleCode = exampleCodeRegex.exec(source)) !== null) {\n        const {index, 0: n0, 1: n1} = exampleCode;\n\n        // Count anything preceding user regex match (can affect line numbering)\n        const preMatch = source.slice(startingIndex, index);\n\n        const preMatchLines = countChars(preMatch, '\\n');\n\n        const colDelta = preMatchLines ?\n          preMatch.slice(preMatch.lastIndexOf('\\n') + 1).length :\n          preMatch.length;\n\n        let nonJSPreface;\n        let nonJSPrefaceLineCount;\n        if (n1) {\n          const idx = n0.indexOf(n1);\n          nonJSPreface = n0.slice(0, idx);\n          nonJSPrefaceLineCount = countChars(nonJSPreface, '\\n');\n        } else {\n          nonJSPreface = '';\n          nonJSPrefaceLineCount = 0;\n        }\n\n        nonJSPrefacingLines += lastStringCount + preMatchLines + nonJSPrefaceLineCount;\n\n        // Ignore `preMatch` delta if newlines here\n        if (nonJSPrefaceLineCount) {\n          const charsInLastLine = nonJSPreface.slice(nonJSPreface.lastIndexOf('\\n') + 1).length;\n\n          nonJSPrefacingCols += charsInLastLine;\n        } else {\n          nonJSPrefacingCols += colDelta + nonJSPreface.length;\n        }\n\n        const string = n1 || n0;\n        sources.push({\n          nonJSPrefacingCols,\n          nonJSPrefacingLines,\n          string,\n        });\n        startingIndex = exampleCodeRegex.lastIndex;\n        lastStringCount = countChars(string, '\\n');\n        if (!exampleCodeRegex.global) {\n          break;\n        }\n      }\n    } else {\n      sources.push({\n        nonJSPrefacingCols: 0,\n        nonJSPrefacingLines: 0,\n        string: source,\n      });\n    }\n\n    // Todo: Make fixable\n    // Todo: Fix whitespace indent\n    const checkRules = function ({\n      nonJSPrefacingCols,\n      nonJSPrefacingLines,\n      string,\n    }) {\n      // Programmatic ESLint API: https://eslint.org/docs/developer-guide/nodejs-api\n      const cli = new CLIEngine({\n        allowInlineConfig,\n        baseConfig,\n        configFile,\n        reportUnusedDisableDirectives,\n        rulePaths,\n        rules,\n        useEslintrc: eslintrcForExamples,\n      });\n\n      let messages;\n\n      let src = string;\n      if (paddedIndent) {\n        src = src.replace(new RegExp(`(^|\\n) {${paddedIndent}}(?!$)`, 'gu'), '\\n');\n      }\n\n      if (filename) {\n        const config = cli.getConfigForFile(filename);\n\n        // We need a new instance to ensure that the rules that may only\n        //  be available to `filename` (if it has its own `.eslintrc`),\n        //  will be defined.\n        const cliFile = new CLIEngine({\n          allowInlineConfig,\n          baseConfig: config,\n          configFile,\n          reportUnusedDisableDirectives,\n          rulePaths,\n          rules,\n          useEslintrc: eslintrcForExamples,\n        });\n\n        const linter = new Linter();\n\n        // Force external rules to become available on `cli`\n        try {\n          cliFile.executeOnText('');\n        } catch (error) {\n          // Ignore\n        }\n\n        const linterRules = [...cliFile.getRules().entries()].reduce((obj, [key, val]) => {\n          obj[key] = val;\n\n          return obj;\n        }, {});\n\n        linter.defineRules(linterRules);\n\n        if (config.parser) {\n          // eslint-disable-next-line global-require, import/no-dynamic-require\n          linter.defineParser(config.parser, require(config.parser));\n        }\n\n        // Could also support `disableFixes` and `allowInlineConfig`\n        messages = linter.verify(src, config, {\n          filename,\n          reportUnusedDisableDirectives,\n        });\n      } else {\n        ({results: [{messages}]} =\n          cli.executeOnText(src));\n      }\n\n      // NOTE: `tag.line` can be 0 if of form `/** @tag ... */`\n      const codeStartLine = tag.line + nonJSPrefacingLines;\n      const codeStartCol = likelyNestedJSDocIndentSpace;\n\n      messages.forEach(({message, line, column, severity, ruleId}) => {\n        const startLine = codeStartLine + line + zeroBasedLineIndexAdjust;\n        const startCol = codeStartCol + (\n\n          // This might not work for line 0, but line 0 is unlikely for examples\n          line <= 1 ? nonJSPrefacingCols + firstLinePrefixLength : preTagSpaceLength\n        ) + column;\n\n        report(\n          '@' + targetTagName + ' ' + (severity === 2 ? 'error' : 'warning') +\n            (ruleId ? ' (' + ruleId + ')' : '') + ': ' +\n            message,\n          null,\n          {\n            column: startCol,\n            line: startLine,\n          },\n        );\n      });\n    };\n\n    sources.forEach(checkRules);\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          allowInlineConfig: {\n            default: true,\n            type: 'boolean',\n          },\n          baseConfig: {\n            type: 'object',\n          },\n          captionRequired: {\n            default: false,\n            type: 'boolean',\n          },\n          configFile: {\n            type: 'string',\n          },\n          eslintrcForExamples: {\n            default: true,\n            type: 'boolean',\n          },\n          exampleCodeRegex: {\n            type: 'string',\n          },\n          matchingFileName: {\n            type: 'string',\n          },\n          noDefaultExampleRules: {\n            default: false,\n            type: 'boolean',\n          },\n          paddedIndent: {\n            default: 0,\n            type: 'integer',\n          },\n          rejectExampleCodeRegex: {\n            type: 'string',\n          },\n          reportUnusedDisableDirectives: {\n            default: true,\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n  noTrim: true,\n});\n"],"file":"checkExamples.js"}